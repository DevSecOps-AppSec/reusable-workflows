name: Quarterly Repo Audit

on:
  schedule:
    - cron: '0 0 1 1,4,7,10 *'  # Run quarterly on the 1st of Jan, Apr, Jul, Oct at midnight
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write  # Ensure write permissions are granted

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    # Step 3: Install required dependencies (if any)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    # Step 4: Run your Python script to generate a new CSV in the audit folder
    - name: Run repository audit script
      env:
        GITHUB_PAT: ${{ secrets.PAT_TOKEN }}  # Use the PAT_TOKEN instead of GITHUB_TOKEN
      run: |
        mkdir -p audit  # Create the audit folder if it doesn't exist
        python audit/getAllOrgSecretScanAudit.py -pat ${{ secrets.PAT_TOKEN }} -org DevSecOps-AppSec -output audit/repos_data_$(date +'%Y%m%d-%H%M%S').csv  # Output new file to audit folder

    # Step 5: Configure git with PAT user
    - name: Configure git with PAT user
      run: |
        git config --global user.name 'souro1212'
        git config --global user.email 'souradip1212@gmail.com'

    # Step 6: Create new branch and store its name in an output
    - name: Create new branch
      id: create_branch  # Give the step an ID so we can reference it later
      run: |
        BRANCH_NAME="update-repo-audit-$(date +'%Y%m%d-%H%M%S')"
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV  # Store the branch name as an environment variable
        git checkout -b $BRANCH_NAME
        git add audit/*.csv
        git commit -m 'Add new repository audit CSV file'
        git push https://$GH_PAT@github.com/${{ github.repository }}.git $BRANCH_NAME

    # Step 7: Use GitHub API to create a pull request and capture the PR URL
    - name: Create pull request using GitHub API
      id: create_pr
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ github.event.repository.name }}
        BRANCH_NAME: ${{ env.BRANCH_NAME }}
      run: |
        PR_RESPONSE=$(curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
        -d "{\"title\":\"Update repo audit CSV file\",\"head\":\"$BRANCH_NAME\",\"base\":\"main\",\"body\":\"This pull request contains the updated repo audit CSV file.\"}" \
        https://api.github.com/repos/${{ github.repository }}/pulls)

        PR_URL=$(echo $PR_RESPONSE | jq -r '.html_url')
        echo "PR_URL=$PR_URL" >> $GITHUB_ENV  # Save the PR URL for the next step

    # Step 8: Send pull request details to Slack with Block Kit formatting and URL interpolation
    - name: Send PR details to Slack
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        PR_URL: ${{ env.PR_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data "$(jq -n --arg pr_url "$PR_URL" '{
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*:lock: Quarterly Audit for Secret Scan Configuration*"
              }
            },
            {
              "type": "divider"
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": ":mag: *Audit Summary*: A new quarterly audit for secret scan configuration has been completed."
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "<\($pr_url)|:link: View the full report and pull request here.>"
              }
            }
          ]
        }')" \
        $SLACK_WEBHOOK_URL
        
